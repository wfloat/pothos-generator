datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator pothos {
  provider     = "prisma-pothos-types"
  clientOutput = "@prisma/client"
  output       = "./generated/pothos.d.ts"
}

generator kysely {
  provider = "prisma-kysely"
  output   = "./generated"
  fileName = "kysely.d.ts"
}

// import "rules/Account.ts"
model Account {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  firstName     String
  lastName      String?
  modifiedPosts Post[]    @relation("1")
  posts         Post[]    @relation("0")
  comments      Comment[]
  dashboard     Dashboard @relation(fields: [id], references: [id])
}

model Post {
  id       String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title    String
  content  String
  author   Account   @relation(fields: [authorId], references: [id], name: "0")
  comments Comment[]
  authorId String    @db.Uuid
  editor   Account?  @relation(fields: [editorId], references: [id], name: "1")
  editorId String?   @db.Uuid
}

model Comment {
  id          String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  comment     String
  author      Account    @relation(fields: [authorId], references: [id])
  post        Post       @relation(fields: [postId], references: [id])
  authorId    String     @db.Uuid
  postId      String     @db.Uuid
  quality     Quality? // ctx.loaders.qualityFromComment.load(id) use field name not model name at front
  Dashboard   Dashboard? // @relation(fields: [id], references: [id]) @ignore
}

model Quality {
  id        String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  score     Int
  commentId String  @unique @db.Uuid
  comment   Comment @relation(fields: [commentId], references: [id]) // ctx.loaders.comment.load(commentId)
}

model Dashboard {
  id       String    @id @unique @db.Uuid
  foo      String
  bar      String
  comments Comment[] @ignore
  account  Account? // @virtual
  // @virtual
}
